library(geoR)
library(ggplot2)
library(MASS,stats)
library(mvtnorm)
library(nlme)
library(PerformanceAnalytics)
library(purrr)
library(qqplotr)
library(quantmod)
library(readr)
library(rtweet)
library(tidyr)
library(tidytext)
library(tidyverse)
library(testcorr)
library(textdata)
library(TSstudio)
library(scales)
library(stringr)
library(vader)
#------------------------------------------------------------------------------------------------------------------------------------------------#
View(BTCUSD_1hr)
# **LIBRARIES ---------------------------------------------------------------
library(astsa)
library(car)
library(coinmarketcapr)
library(corrplot)
library(data.table)
library(dplyr)
library(httpuv)
library(geoR)
library(ggplot2)
library(MASS,stats)
library(mvtnorm)
library(nlme)
library(PerformanceAnalytics)
library(purrr)
library(qqplotr)
library(quantmod)
library(readr)
library(rtweet)
library(tidyr)
library(tidytext)
library(tidyverse)
library(testcorr)
library(textdata)
library(TSstudio)
library(scales)
library(stringr)
library(vader)
#------------------------------------------------------------------------------------------------------------------------------------------------#
# *S1: GET NECESSARY PRICE DATASET -----------------------------------------------
data.ETH<-getSymbols("ETH-USD",from="2016-05-31",to="2021-05-31",auto.assign = FALSE)
ETHUSD_1hr<-read_csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Cryptos Hourly Data/ETHUSD_1hr_woline1.csv")
ETHUSD_1hr<-subset(ETHUSD_1hr,ETHUSD_1hr$Date>="2016-05-31" &
ETHUSD_1hr$Date<="2021-06-01")
ETHUSD_1hr<-ETHUSD_1hr[c(10:43843),] #Clear out those rows with unnecessary dates
##**Daily Price movement of ETH 2016-2021 ---------------------------------
ggplot(data.ETH,aes(x=index(data.ETH)))+
geom_line(aes(y=data.ETH$`ETH-USD.Adjusted`))+
labs(x = "Date", y = "Value ($)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + # centers headline
labs(title = "Value of $1 Investment in Etherium May 31, 2016 - May 31, 2021",
caption = "Data retrieved from Yahoo! Finance")
ggplot(data.ETH,aes(x=index(data.ETH)))+
geom_line(aes(y=data.ETH$`ETH-USD.Adjusted`))+
labs(x = "Date", y = "Value ($)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + # centers headline
labs(
caption = "Data retrieved from Yahoo! Finance")
# *S5: ALPHA & BETA USING CAPM, MARKET MODEL, AND ROLLING WINDOW REGRESSION --------
#Knowledge from Ang 2015, Chapter 5
#CAPM
#Step 0: Construct a monthly returns of ETH
data.ETH[c(1:3,nrow(data.ETH)),]
ETH.monthly<-to.monthly(data.ETH)
ETH.monthly[c(1:3,nrow(ETH.monthly)),]
ETH.monthly<-ETH.monthly[,6]
ETH.ret<-Delt(ETH.monthly$data.ETH.Adjusted)
names(ETH.ret)<-paste("ETH.ret")
ETH.ret<-ETH.ret[-1,]
ETH.ret[c(1:3,nrow(ETH.ret)),]
csv.ETH<-cbind(data.frame(index(ETH.ret)),data.frame(ETH.ret))
names(csv.ETH)[1]<-paste("date")
rownames(csv.ETH)<-seq(1,nrow(csv.ETH),by=1)
csv.ETH[c(1:3,nrow(csv.ETH)),]
write.csv(csv.ETH,"ETH Returns (Monthly).csv") #Now, we have the csv file for the next steps.
#Step 1: Import Portfolio Returns and Convert to a data.frame Object
ETH<-read.csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Others/ETH Returns (Monthly).csv", header = TRUE)
ETH[c(1:3,nrow(ETH)),]
ETH$date<-as.yearmon(as.character(ETH$date),"%b %Y")
ETH[c(1:3,nrow(ETH)),]
ETH.df<-data.frame(ETH)
ETH.df[c(1:3,nrow(ETH.df)),]
#Step 2: Import S&P 500 Index Data from Yahoo Finance and Calculate Monthly Market Returns
data.mkt<-getSymbols("^GSPC",from="2016-05-31", to="2021-05-31",auto.assign = FALSE)
data.mkt[c(1:3,nrow(data.mkt)),]
mkt.monthly<-to.monthly(data.mkt)
mkt.monthly[c(1:3,nrow(mkt.monthly)),]
mkt.monthly<-mkt.monthly[,6]
mkt.ret<-Delt(mkt.monthly$data.mkt.Adjusted)
names(mkt.ret)<-paste("mkt.ret")
mkt.ret<-mkt.ret[-1,]
mkt.ret[c(1:3,nrow(mkt.ret)),]
market.df<-data.frame(mkt.ret)
head(market.df)
tail(market.df)
#Step 3: Import Risk-Free Rate Data from FRED and Setup Data to Contain Monthly Risk-Free Returns
#For rf data, go to https://fred.stlouisfed.org/ and download the 3-Month Constant Maturity Treasury rate. Save as "DGS3MOFRED.csv"
rf<-read.csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Others/DGS3MOFRED.csv", skip = 10)
rf[1:3,]
rf$date<-as.Date(rf$X2016.04.14,"%Y-%m-%d")
rf$X0.22<-as.numeric(as.character(rf$X0.22))
names(rf)[2]<-paste("DGS3MO")
names(rf)[1]<-paste("observation_date")
rf[c(1:3,nrow(rf)),]
rf<-subset(rf,rf$date >= "2016-05-31" &
rf$date <= "2021-05-31")
rf[c(1:3,nrow(rf)),]
#Step 3a: Convert to xts Object
rf<-xts(rf$DGS3MO,order.by = rf$date)
names(rf)<-paste("DGS3MO")
rf[c(1:3,nrow(rf)),]
#Step 3b: Apply to.monthly Command to Identify First Yield for Each Month
rf.monthly<-to.monthly(rf)
rf.monthly[c(1:3,nrow(rf.monthly)),]
#Step 3c: Convert Opening Annualized Yield for Each Month Into a Monthly Yield
#The Yield shown in 3b is annualized Yield. Instead, we want monthly yield, using geometric average calculation
options(scipen = 100) #Our results will be small; "scipens" prevent R from showing notations (0.010E+...), but the long result instead (0.01054179266)
rf.monthly<-(1+rf.monthly[,1]/100)^(1/12)-1
rf.monthly<-rf.monthly[-1,]
rf.monthly[c(1:3,nrow(rf.monthly)),]
#Step 4: Combine BTC, mkt, and rf Data Into One Data Object
combo.ETH<-cbind(market.df,data.frame(rf.monthly),ETH.df$ETH.ret)
combo.ETH[c(1:3,nrow(combo.ETH)),]
names(combo.ETH)<-paste(c("mkt.ret","rf","ETH.ret"))
combo.ETH[c(1:3,nrow(combo.ETH)),]
#Step 5: Calculate Excess BTC Return and Excess Market Return
#Excess BTC Return (exret) = port.ret - rf
#Excess Market Return (exmkt) = mkt.ret - rf
combo.ETH$exret<-combo.ETH$ETH.ret -combo.ETH$rf
combo.ETH$exmkt<-combo.ETH$mkt.ret-combo.ETH$rf
combo.ETH[c(1:3,nrow(combo.ETH)),]
#Step 6: Run Regression of Excess BTC Return on Excess Market Return
#We use "lm" command to calculate OLS Regression between exret & exmkt
options(digits = 3)
CAPM<-lm(combo.ETH$exret~combo.ETH$exmkt) #lm stands for "linear model", the function that creates a simple regression model
summary(CAPM)
#Rolling Window Regression
#In this section, we run regression through a rolling window, which calculate Alphas and Betas in different periods.
#=> Thus we can see how variable these two are, over a time period.
#Step 1: Import ETH and S&P 500 Index Data
data.ETH[c(1:3,nrow(data.ETH)),]
data.mkt[c(1:3,nrow(data.mkt)),]
#Step 2: Calculate the BTC and Market Returns
rets<-diff(log(data.ETH$`ETH-USD.Adjusted`))
rets$GSPC<-diff(log(data.mkt$GSPC.Adjusted))
names(rets)[1]<-"ETH"
rets<-rets[-1,]
rets[c(1:3,nrow(rets)),]
#Step 3: Create the Rolling Window Regression Function
require(zoo)
coeffs<-rollapply(rets,
width = 252,
FUN = function(X)
{
roll.reg=lm(ETH~GSPC,
data=as.data.frame(X))
return(roll.reg$coef) #used to output the parameter estimates (i.e., the intercept term and the coefficient for the market return) of the regression.
},
by.column = FALSE)
coeffs[c(1,251:253,nrow(coeffs)),]
#Step 4: Remove NAs From the Data
coeffs<-na.omit(coeffs)
coeffs[c(1:3,nrow(coeffs)),]
#Step 5: Clean-Up Data
#We want: Rename the columns to "Alpha" & "Beta"
coeffs<-coeffs[-1,]
names(coeffs)<-c("Alpha","Beta")
coeffs[c(1:3,nrow(coeffs)),]
p1 <- ggplot(coeffs, aes(index(coeffs), coeffs$Alpha)) + geom_line() + theme_minimal() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank(),axis.text.y = element_text(angle = 90))+
labs(x = "Date", y = "Alpha")
p2 <- ggplot(coeffs, aes(index(coeffs), coeffs$Beta)) + geom_line() + theme_minimal() +
theme(axis.text.x = element_text())+
geom_hline(yintercept = 0,col="red")+
labs(x = "Date", y = "Beta")
library(grid)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
# **LIBRARIES ---------------------------------------------------------------
library(astsa)
library(car)
library(coinmarketcapr)
library(corrplot)
library(data.table)
library(dplyr)
library(httpuv)
library(geoR)
library(ggplot2)
library(MASS,stats)
library(mvtnorm)
library(nlme)
library(PerformanceAnalytics)
library(purrr)
library(qqplotr)
library(quantmod)
library(readr)
library(rtweet)
library(tidyr)
library(tidytext)
library(tidyverse)
library(testcorr)
library(textdata)
library(TSstudio)
library(scales)
library(stringr)
library(vader)
#------------------------------------------------------------------------------------------------------------------------------------------------#
# *S1: GET NECESSARY PRICE DATASET -----------------------------------------------
data.XRP<-getSymbols("XRP-USD",from="2018-05-15",to="2021-05-31",auto.assign = FALSE)
XRPUSD_1hr<-read_csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Cryptos Hourly Data/XRPUSD_1hr_woline1.csv")
XRPUSD_1hr<-subset(XRPUSD_1hr,XRPUSD_1hr$date>="2016-05-31" &
XRPUSD_1hr$date<="2021-06-01")
ggplot(data.XRP,aes(x=index(data.XRP)))+
geom_line(aes(y=data.XRP$`XRP-USD.Adjusted`))+
labs(x = "Date", y = "Value ($)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + # centers headline
labs(
caption = "Data retrieved from Yahoo! Finance")
# *S5: ALPHA & BETA USING CAPM, MARKET MODEL, AND ROLLING WINDOW REGRESSION --------
#Knowledge from Ang 2015, Chapter 5
#CAPM
#Step 0: Construct a monthly returns of Crypto
data.XRP[c(1:3,nrow(data.XRP)),]
XRP.monthly<-to.monthly(data.XRP)
XRP.monthly[c(1:3,nrow(XRP.monthly)),]
XRP.monthly<-XRP.monthly[,6]
XRP.ret<-Delt(XRP.monthly$data.XRP.Adjusted)
names(XRP.ret)<-paste("XRP.ret")
XRP.ret<-XRP.ret[-1,]
XRP.ret[c(1:3,nrow(XRP.ret)),]
csv.XRP<-cbind(data.frame(index(XRP.ret)),data.frame(XRP.ret))
names(csv.XRP)[1]<-paste("date")
rownames(csv.XRP)<-seq(1,nrow(csv.XRP),by=1)
csv.XRP[c(1:3,nrow(csv.XRP)),]
write.csv(csv.XRP,"XRP Returns (Monthly).csv") #Now, we have the csv file for the next steps.
#Step 1: Import Portfolio Returns and Convert to a data.frame Object
XRP<-read.csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Others/XRP Returns (Monthly).csv", header = TRUE)
XRP[c(1:3,nrow(XRP)),]
XRP$date<-as.yearmon(as.character(XRP$date),"%b %Y")
XRP[c(1:3,nrow(XRP)),]
XRP.df<-data.frame(XRP)
XRP.df[c(1:3,nrow(XRP.df)),]
#Step 2: Import S&P 500 Index Data from Yahoo Finance and Calculate Monthly Market Returns
data.mkt<-getSymbols("^GSPC",from="2018-05-15", to="2021-05-31",auto.assign = FALSE)
data.mkt[c(1:3,nrow(data.mkt)),]
mkt.monthly<-to.monthly(data.mkt)
mkt.monthly[c(1:3,nrow(mkt.monthly)),]
mkt.monthly<-mkt.monthly[,6]
mkt.ret<-Delt(mkt.monthly$data.mkt.Adjusted)
names(mkt.ret)<-paste("mkt.ret")
mkt.ret<-mkt.ret[-1,]
mkt.ret[c(1:3,nrow(mkt.ret)),]
market.df<-data.frame(mkt.ret)
head(market.df)
tail(market.df)
#Step 3: Import Risk-Free Rate Data from FRED and Setup Data to Contain Monthly Risk-Free Returns
#For rf data, go to https://fred.stlouisfed.org/ and download the 3-Month Constant Maturity Treasury rate. Save as "DGS3MOFRED.csv"
rf<-read.csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Others/DGS3MOFRED.csv", skip = 10)
rf[1:3,]
rf$date<-as.Date(rf$X2016.04.14,"%Y-%m-%d")
rf$X0.22<-as.numeric(as.character(rf$X0.22))
names(rf)[2]<-paste("DGS3MO")
names(rf)[1]<-paste("observation_date")
rf[c(1:3,nrow(rf)),]
rf<-subset(rf,rf$date >= "2018-05-15" &
rf$date <= "2021-05-31")
rf[c(1:3,nrow(rf)),]
#Step 3a: Convert to xts Object
rf<-xts(rf$DGS3MO,order.by = rf$date)
names(rf)<-paste("DGS3MO")
rf[c(1:3,nrow(rf)),]
#Step 3b: Apply to.monthly Command to Identify First Yield for Each Month
rf.monthly<-to.monthly(rf)
rf.monthly[c(1:3,nrow(rf.monthly)),]
#Step 3c: Convert Opening Annualized Yield for Each Month Into a Monthly Yield
#The Yield shown in 3b is annualized Yield. Instead, we want monthly yield, using geometric average calculation
options(scipen = 100) #Our results will be small; "scipens" prevent R from showing notations (0.010E+...), but the long result instead (0.01054179266)
rf.monthly<-(1+rf.monthly[,1]/100)^(1/12)-1
rf.monthly<-rf.monthly[-1,]
rf.monthly[c(1:3,nrow(rf.monthly)),]
#Step 4: Combine XRP, mkt, and rf Data Into One Data Object
combo.XRP<-cbind(market.df,data.frame(rf.monthly),XRP.df$XRP.ret)
combo.XRP[c(1:3,nrow(combo.XRP)),]
names(combo.XRP)<-paste(c("mkt.ret","rf","XRP.ret"))
combo.XRP[c(1:3,nrow(combo.XRP)),]
#Step 5: Calculate Excess Return and Excess Market Return
#Excess Return (exret) = port.ret - rf
#Excess Market Return (exmkt) = mkt.ret - rf
combo.XRP$exret<-combo.XRP$XRP.ret -combo.XRP$rf
combo.XRP$exmkt<-combo.XRP$mkt.ret-combo.XRP$rf
combo.XRP[c(1:3,nrow(combo.XRP)),]
#Step 6: Run Regression of Excess Return on Excess Market Return
#We use "lm" command to calculate OLS Regression between exret & exmkt
options(digits = 3)
CAPM<-lm(combo.XRP$exret~combo.XRP$exmkt) #lm stands for "linear model", the function that creates a simple regression model
summary(CAPM)
#Rolling Window Regression
#In this section, we run regression through a rolling window, which calculate Alphas and Betas in different periods.
#=> Thus we can see how variable these two are, over a time period.
#Step 1: Import XRP and S&P 500 Index Data
data.XRP[c(1:3,nrow(data.XRP)),]
data.mkt[c(1:3,nrow(data.mkt)),]
#Step 2: Calculate the XRP and Market Returns
rets<-diff(log(data.XRP$`XRP-USD.Adjusted`))
rets$GSPC<-diff(log(data.mkt$GSPC.Adjusted))
names(rets)[1]<-"XRP"
rets<-rets[-1,]
rets[c(1:3,nrow(rets)),]
#Step 3: Create the Rolling Window Regression Function
require(zoo)
coeffs<-rollapply(rets,
width = 252,
FUN = function(X)
{
roll.reg=lm(XRP~GSPC,
data=as.data.frame(X))
return(roll.reg$coef) #used to output the parameter estimates (i.e., the intercept term and the coefficient for the market return) of the regression.
},
by.column = FALSE)
coeffs[c(1,251:253,nrow(coeffs)),]
#Step 4: Remove NAs From the Data
coeffs<-na.omit(coeffs)
coeffs[c(1:3,nrow(coeffs)),]
#Step 5: Clean-Up Data
#We want: Rename the columns to "Alpha" & "Beta"
coeffs<-coeffs[-1,]
names(coeffs)<-c("Alpha","Beta")
coeffs[c(1:3,nrow(coeffs)),]
p1 <- ggplot(coeffs, aes(index(coeffs), coeffs$Alpha)) + geom_line() + theme_minimal() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank(),axis.text.y = element_text(angle = 90))+
labs(x = "Date", y = "Alpha")
p2 <- ggplot(coeffs, aes(index(coeffs), coeffs$Beta)) + geom_line() + theme_minimal() +
theme(axis.text.x = element_text())+
geom_hline(yintercept = 0,col="red")+
labs(x = "Date", y = "Beta")
library(grid)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
# **LIBRARIES ---------------------------------------------------------------
library(astsa)
library(car)
library(coinmarketcapr)
library(corrplot)
library(data.table)
library(dplyr)
library(httpuv)
library(geoR)
library(ggplot2)
library(MASS,stats)
library(mvtnorm)
library(nlme)
library(PerformanceAnalytics)
library(purrr)
library(qqplotr)
library(quantmod)
library(readr)
library(rtweet)
library(tidyr)
library(tidytext)
library(tidyverse)
library(testcorr)
library(textdata)
library(TSstudio)
library(scales)
library(stringr)
library(vader)
#------------------------------------------------------------------------------------------------------------------------------------------------#
# *S1: GET NECESSARY PRICE DATASET -----------------------------------------------
data.DOGE<-getSymbols("DOGE-USD",from="2016-05-31",to="2021-05-31",auto.assign = FALSE)
DOGEUSD_1hr<-read_csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Cryptos Hourly Data/DOGEUSD_1hr_woline1.csv")
ggplot(data.DOGE,aes(x=index(data.DOGE)))+
geom_line(aes(y=data.DOGE$`DOGE-USD.Adjusted`))+
labs(x = "Date", y = "Value ($)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) + # centers headline
labs(
caption = "Data retrieved from Yahoo! Finance")
# *S5: ALPHA & BETA USING CAPM, MARKET MODEL, AND ROLLING WINDOW REGRESSION --------
#Knowledge from Ang 2015, Chapter 5
#CAPM
#Step 0: Construct a monthly returns of Crypto
data.DOGE[c(1:3,nrow(data.DOGE)),]
DOGE.monthly<-to.monthly(data.DOGE)
DOGE.monthly[c(1:3,nrow(DOGE.monthly)),]
DOGE.monthly<-DOGE.monthly[,6]
DOGE.ret<-Delt(DOGE.monthly$data.DOGE.Adjusted)
names(DOGE.ret)<-paste("DOGE.ret")
DOGE.ret<-DOGE.ret[-1,]
DOGE.ret[c(1:3,nrow(DOGE.ret)),]
csv.DOGE<-cbind(data.frame(index(DOGE.ret)),data.frame(DOGE.ret))
names(csv.DOGE)[1]<-paste("date")
rownames(csv.DOGE)<-seq(1,nrow(csv.DOGE),by=1)
csv.DOGE[c(1:3,nrow(csv.DOGE)),]
write.csv(csv.DOGE,"DOGE Returns (Monthly).csv") #Now, we have the csv file for the next steps.
#Step 1: Import Portfolio Returns and Convert to a data.frame Object
DOGE<-read.csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Others/DOGE Returns (Monthly).csv", header = TRUE)
DOGE[c(1:3,nrow(DOGE)),]
DOGE$date<-as.yearmon(as.character(DOGE$date),"%b %Y")
DOGE[c(1:3,nrow(DOGE)),]
DOGE.df<-data.frame(DOGE)
DOGE.df[c(1:3,nrow(DOGE.df)),]
#Step 2: Import S&P 500 Index Data from Yahoo Finance and Calculate Monthly Market Returns
data.mkt<-getSymbols("^GSPC",from="2016-05-31", to="2021-05-31",auto.assign = FALSE)
data.mkt[c(1:3,nrow(data.mkt)),]
mkt.monthly<-to.monthly(data.mkt)
mkt.monthly[c(1:3,nrow(mkt.monthly)),]
mkt.monthly<-mkt.monthly[,6]
mkt.ret<-Delt(mkt.monthly$data.mkt.Adjusted)
names(mkt.ret)<-paste("mkt.ret")
mkt.ret<-mkt.ret[-1,]
mkt.ret[c(1:3,nrow(mkt.ret)),]
market.df<-data.frame(mkt.ret)
head(market.df)
tail(market.df)
#Step 3: Import Risk-Free Rate Data from FRED and Setup Data to Contain Monthly Risk-Free Returns
#For rf data, go to https://fred.stlouisfed.org/ and download the 3-Month Constant Maturity Treasury rate. Save as "DGS3MOFRED.csv"
rf<-read.csv("E:/Study Materials/Augsburg Hochschule/BACHELOR THESIS/R/Others/DGS3MOFRED.csv", skip = 10)
rf[1:3,]
rf$date<-as.Date(rf$X2016.04.14,"%Y-%m-%d")
rf$X0.22<-as.numeric(as.character(rf$X0.22))
names(rf)[2]<-paste("DGS3MO")
names(rf)[1]<-paste("observation_date")
rf[c(1:3,nrow(rf)),]
rf<-subset(rf,rf$date >= "2016-05-31" &
rf$date <= "2021-05-31")
rf[c(1:3,nrow(rf)),]
#Step 3a: Convert to xts Object
rf<-xts(rf$DGS3MO,order.by = rf$date)
names(rf)<-paste("DGS3MO")
rf[c(1:3,nrow(rf)),]
#Step 3b: Apply to.monthly Command to Identify First Yield for Each Month
rf.monthly<-to.monthly(rf)
rf.monthly[c(1:3,nrow(rf.monthly)),]
#Step 3c: Convert Opening Annualized Yield for Each Month Into a Monthly Yield
#The Yield shown in 3b is annualized Yield. Instead, we want monthly yield, using geometric average calculation
options(scipen = 100) #Our results will be small; "scipens" prevent R from showing notations (0.010E+...), but the long result instead (0.01054179266)
rf.monthly<-(1+rf.monthly[,1]/100)^(1/12)-1
rf.monthly<-rf.monthly[-1,]
rf.monthly[c(1:3,nrow(rf.monthly)),]
#Step 4: Combine XRP, mkt, and rf Data Into One Data Object
combo.DOGE<-cbind(market.df,data.frame(rf.monthly),DOGE.df$DOGE.ret)
combo.DOGE[c(1:3,nrow(combo.DOGE)),]
names(combo.DOGE)<-paste(c("mkt.ret","rf","DOGE.ret"))
combo.DOGE[c(1:3,nrow(combo.DOGE)),]
#Step 5: Calculate Excess Return and Excess Market Return
#Excess Return (exret) = port.ret - rf
#Excess Market Return (exmkt) = mkt.ret - rf
combo.DOGE$exret<-combo.DOGE$DOGE.ret -combo.DOGE$rf
combo.DOGE$exmkt<-combo.DOGE$mkt.ret-combo.DOGE$rf
combo.DOGE[c(1:3,nrow(combo.DOGE)),]
#Step 6: Run Regression of Excess Return on Excess Market Return
#We use "lm" command to calculate OLS Regression between exret & exmkt
options(digits = 3)
CAPM<-lm(combo.DOGE$exret~combo.DOGE$exmkt) #lm stands for "linear model", the function that creates a simple regression model
summary(CAPM)
#Rolling Window Regression
#In this section, we run regression through a rolling window, which calculate Alphas and Betas in different periods.
#=> Thus we can see how variable these two are, over a time period.
#Step 1: Import DOGE and S&P 500 Index Data
data.DOGE[c(1:3,nrow(data.DOGE)),]
data.mkt[c(1:3,nrow(data.mkt)),]
#Step 2: Calculate the DOGE and Market Returns
rets<-diff(log(data.DOGE$`DOGE-USD.Adjusted`))
rets$GSPC<-diff(log(data.mkt$GSPC.Adjusted))
names(rets)[1]<-"DOGE"
rets<-rets[-1,]
rets[c(1:3,nrow(rets)),]
#Step 3: Create the Rolling Window Regression Function
require(zoo)
coeffs<-rollapply(rets,
width = 252,
FUN = function(X)
{
roll.reg=lm(DOGE~GSPC,
data=as.data.frame(X))
return(roll.reg$coef) #used to output the parameter estimates (i.e., the intercept term and the coefficient for the market return) of the regression.
},
by.column = FALSE)
coeffs[c(1,251:253,nrow(coeffs)),]
#Step 4: Remove NAs From the Data
coeffs<-na.omit(coeffs)
coeffs[c(1:3,nrow(coeffs)),]
#Step 5: Clean-Up Data
#We want: Rename the columns to "Alpha" & "Beta"
coeffs<-coeffs[-1,]
names(coeffs)<-c("Alpha","Beta")
coeffs[c(1:3,nrow(coeffs)),]
p1 <- ggplot(coeffs, aes(index(coeffs), coeffs$Alpha)) + geom_line() + theme_minimal() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank(),axis.text.y = element_text(angle = 90))+
labs(x = "Date", y = "Alpha")
p2 <- ggplot(coeffs, aes(index(coeffs), coeffs$Beta)) + geom_line() + theme_minimal() +
theme(axis.text.x = element_text())+
geom_hline(yintercept = 0,col="red")+
labs(x = "Date", y = "Beta")
library(grid)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
